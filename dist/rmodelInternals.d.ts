import RMNode from './RMNode';
import RMProxy from './RMProxy';
import RMChangeListener from './RMChangeListener';
import RMBufferedCalls from './RMBufferedCalls';
import RMBufferedCall from './RMBufferedCall';
declare const _default: {
    RModel: ((value: any) => any) & {
        isRoot: (value: any) => boolean;
        root: (value: any) => object | null;
        parent: (value: any) => object | null;
        property: (value: any) => string | null;
        primaryReference: (value: any) => import("./Types").Reference | null;
        secondaryReferences: (value: any) => import("./Types").Reference[];
        hasRModel: (value: any) => boolean;
        managedValue: (value: any) => any;
        addChangeListener: (value: any, listener: import("./Types").ChangeListener, options?: import("./Types").ChangeListenerOptions | null) => void;
        removeChangeListener: (value: any, listener: import("./Types").ChangeListener, options?: import("./Types").ChangeListenerOptions | null) => void;
        findDependencies: (func: () => void) => import("./Types").Dependency[];
        bufferCall: (key: any, f: () => void) => void;
        flushBufferedCalls: () => void;
        addComputedProperty: <T, R>(value: T, property: string, f: (obj: T) => R, options?: import("./Types").ComputedPropertyOptions | null) => void;
        removeComputedProperty: (value: any, property: string) => void;
        setId: (value: any, id: string) => void;
        getId: (value: any) => string | null;
        deleteId: (value: any) => void;
        findById: (value: any, id: string) => object | null;
        setImmutable: (value: any, listener: import("./Types").ImmutableListener) => object;
        computed: <T, R>(f: (obj: T) => R, options?: import("./Types").ComputedPropertyOptions | null) => object;
    };
    RMNode: typeof RMNode;
    RMProxy: typeof RMProxy;
    RMChangeListener: typeof RMChangeListener;
    RMBufferedCalls: typeof RMBufferedCalls;
    RMBufferedCall: typeof RMBufferedCall;
};
export default _default;
