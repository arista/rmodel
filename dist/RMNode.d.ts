import RMChangeListener from './RMChangeListener';
import RMProxy from './RMProxy';
import RMReference from './RMReference';
import RMComputedProperty from './RMComputedProperty';
import RMRootChangeListener from './RMRootChangeListener';
import RMParentChangeListener from './RMParentChangeListener';
import RMPropertyNameChangeListener from './RMPropertyNameChangeListener';
import RMIdChangeListener from './RMIdChangeListener';
import RMFindByIdChangeListener from './RMFindByIdChangeListener';
import RMImmutableTracker from './RMImmutableTracker';
import { ChangeListenerOptions } from './Types';
import { ChangeListener } from './Types';
import { ComputedPropertyOptions } from './Types';
import { ImmutableListener } from './Types';
import { RootChangeListener } from './InternalTypes';
import { ParentChangeListener } from './InternalTypes';
import { PropertyNameChangeListener } from './InternalTypes';
import { IdChangeListener } from './InternalTypes';
import { FindByIdChangeListener } from './InternalTypes';
export default class RMNode {
    target: object;
    disconnected: boolean;
    _root: RMNode;
    proxyHandler: RMProxy;
    proxy: object;
    primaryReference: RMReference | null;
    secondaryReferences: Array<RMReference> | null;
    isGCing: boolean;
    isGCReferenced: boolean;
    isGCPrimaryReferenced: boolean;
    _spliceProxy: Function | null;
    _pushProxy: Function | null;
    _popProxy: Function | null;
    _shiftProxy: Function | null;
    _unshiftProxy: Function | null;
    changeListeners: Array<RMChangeListener> | null;
    computedProperties: Array<RMComputedProperty<any, any>> | null;
    id: string | null;
    nodesById: {
        [key: string]: RMNode;
    } | null;
    rootChangeListeners: Array<RMRootChangeListener> | null;
    parentChangeListeners: Array<RMParentChangeListener> | null;
    propertyNameChangeListeners: Array<RMPropertyNameChangeListener> | null;
    idChangeListeners: Array<RMIdChangeListener> | null;
    findByIdChangeListeners: {
        [key: string]: Array<RMFindByIdChangeListener> | null;
    } | null;
    immutableValue: object | null;
    newImmutableValue: object | null;
    _immutableTracker: RMImmutableTracker | null;
    constructor(target: object);
    isRoot(): boolean;
    readonly root: RMNode;
    isSameTree(node: RMNode | null): boolean;
    readonly parent: RMNode | null;
    readonly property: string | null;
    readonly children: Array<RMNode>;
    readonly descendants: Array<RMNode>;
    readonly thisAndDescendants: Array<RMNode>;
    addDescendantsToArray(arr: Array<RMNode>): void;
    isDescendantOf(ancestor: RMNode): boolean;
    isSameOrDescendantOf(ancestor: RMNode): boolean;
    isPrimaryReference(referrer: RMNode, property: string): boolean;
    setPrimaryReference(referrer: RMNode, property: string, added: Array<RMNode> | null): void;
    assignPrimaryReference(ref: RMReference | null): void;
    setRoot(newRoot: RMNode, added: Array<RMNode> | null): void;
    hasSecondaryReference(referrer: RMNode, property: string): boolean;
    addSecondaryReference(referrer: RMNode, property: string): void;
    removeSecondaryReference(referrer: RMNode, property: string): void;
    removeReference(referrer: RMNode, property: string): void;
    proxyGet(property: (string | symbol)): any | null;
    proxySet(property: (string | symbol), value: any | null): boolean;
    proxyDelete(property: (string | symbol)): boolean;
    static getNode(target: object): RMNode | null;
    static createNode(target: object): RMNode;
    static deleteNode(target: object): void;
    static valueToRModel(value: any): any;
    static objectToRModel(obj: object): object;
    static getNodeForValue(value: any): RMNode | null;
    static getNodeForObject(obj: object): RMNode | null;
    static getConnectedOrDisconnectedNodeForObject(obj: object): RMNode | null;
    static getOrCreateNodeForObject(obj: object): RMNode;
    static createNodeForObject(target: object): RMNode;
    static toExternalValue(value: any): any;
    static toExternalArray(arr: Array<RMNode> | null): Array<any> | null;
    static toInternalValue(value: any): any;
    static hasRModel(value: any): boolean;
    static getManagedValue(value: any): any;
    static hasNonRootNode(value: any): boolean;
    processChildren(added?: Array<RMNode> | null): void;
    proxyArrayPush(func: any, args: Array<any>): any;
    proxyArrayPop(func: any, args: Array<any>): any;
    proxyArrayShift(func: any, args: Array<any>): any;
    proxyArrayUnshift(func: any, args: Array<any>): any;
    proxyArraySplice(func: any, args: Array<any>): any;
    arraySplice(start: number, deleteCount: number, inserted: Array<any> | null, deleted: Array<any> | null, oldLength: number, newLength: number): Array<any> | null;
    getSpliceStart(args: Array<any>, length: number): number;
    getSpliceDeleteCount(args: Array<any>, length: number, start: number): number;
    argsToInternalValues(args: Array<any>, start: number): Array<any> | null;
    addValueForSplice(value: any, start: number, index: number, addedNodes: Array<RMNode> | null, inserted: Array<any>): Array<RMNode> | null;
    adjustReferrerIndexProperties(start: number, delta: number): void;
    adjustElementReferrerIndexProperty(arr: Array<any>, ix: number, start: number, delta: number): void;
    adjustReferrerIndexProperty(referrer: RMNode, oldIndex: number, newIndex: number): void;
    readonly pushProxy: Function;
    readonly popProxy: Function;
    readonly unshiftProxy: Function;
    readonly shiftProxy: Function;
    readonly spliceProxy: Function;
    addChangeListener(listener: ChangeListener, options?: ChangeListenerOptions | null): void;
    removeChangeListener(listener: ChangeListener, options?: ChangeListenerOptions | null): void;
    hasChangeListener(listener: ChangeListener, options?: ChangeListenerOptions | null): boolean;
    getInterestedPropertyChangeListeners(property: string): Array<RMChangeListener> | null;
    getInterestedArrayChangeListeners(): Array<RMChangeListener> | null;
    addRootChangeListener(listener: RootChangeListener): void;
    removeRootChangeListener(listener: RootChangeListener): void;
    hasRootChangeListener(listener: RootChangeListener): boolean;
    notifyRootChangeListeners(oldRoot: RMNode, newRoot: RMNode): void;
    addParentChangeListener(listener: ParentChangeListener): void;
    removeParentChangeListener(listener: ParentChangeListener): void;
    hasParentChangeListener(listener: ParentChangeListener): boolean;
    notifyParentChangeListeners(oldParent: RMNode | null, newParent: RMNode | null): void;
    addPropertyNameChangeListener(listener: PropertyNameChangeListener): void;
    removePropertyNameChangeListener(listener: PropertyNameChangeListener): void;
    hasPropertyNameChangeListener(listener: PropertyNameChangeListener): boolean;
    notifyPropertyNameChangeListeners(oldProperty: string | null, newProperty: string | null): void;
    addIdChangeListener(listener: IdChangeListener): void;
    removeIdChangeListener(listener: IdChangeListener): void;
    hasIdChangeListener(listener: IdChangeListener): boolean;
    notifyIdChangeListeners(oldId: string | null, newId: string | null): void;
    addFindByIdChangeListener(listener: FindByIdChangeListener, id: string): void;
    removeFindByIdChangeListener(listener: FindByIdChangeListener, id: string): void;
    hasFindByIdChangeListener(listener: FindByIdChangeListener, id: string): boolean;
    notifyFindByIdChangeListeners(id: string, oldValue: RMNode | null, newValue: RMNode | null): void;
    transferFindByIdChangeListeners(newRoot: RMNode): void;
    referenceValue(value: any, property: string, added: Array<RMNode> | null): Array<RMNode> | null;
    dereferenceValue(value: any, property: string, removed: Array<RMNode> | null): void;
    removePrimaryReference(removed: Array<RMNode> | null): void;
    dereferenced(removed: Array<RMNode> | null): void;
    findReplacementSecondaryReference(): RMReference | null;
    hasSecondaryReferenceNotGCing(): boolean;
    assignPostGCPrimaryReference(): void;
    removeNode(): void;
    addComputedProperty<T, R>(property: string, f: (obj: T) => R, options: ComputedPropertyOptions | null): void;
    removeComputedProperty(property: string): void;
    setId(id: string): void;
    getId(): string | null;
    deleteId(): void;
    assignId(id: string | null): void;
    findById(id: string): object | null;
    findNodeById(id: string): RMNode | null;
    mergeNodesById(newRoot: RMNode): void;
    setNodeById(id: string, value: RMNode | null): void;
    hasNodeWithId(id: string): boolean;
    setImmutable(listener: ImmutableListener): object;
    readonly immutableTracker: RMImmutableTracker | null;
    readonly hasImmutableTracker: boolean;
    getOrCreateImmutableValue(): object;
    prepareImmutableCopy(obj: object): object;
    flushImmutableChanges(): void;
    prepareImmutableChange(): object | null;
    prepareImmutableChangeReferrers(newValue: object): void;
    prepareImmutableChangeReferrer(ref: RMReference, newValue: object): void;
    immutableSetProperty(property: string, value: any): void;
    immutableDeleteProperty(property: string): void;
    immutableApplyFunction(func: any, args: Array<any>): void;
}
