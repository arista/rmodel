import RMReference from "./RMReference";
import { ChangeListenerOptions } from './Types';
import { ChangeListener } from './Types';
import { ComputedPropertyOptions } from './Types';
import { ImmutableListener } from './Types';
import { RootChangeListener } from './InternalTypes';
import { ParentChangeListener } from './InternalTypes';
import { PropertyNameChangeListener } from './InternalTypes';
import { IdChangeListener } from './InternalTypes';
import { FindByIdChangeListener } from './InternalTypes';
export default class RMNode {
    target: object;
    primaryReference: RMReference | null;
    secondaryReferences: Array<RMReference> | null;
    proxy: object;
    immutableValue: object | null;
    proxyArrayPop(func: any, args: Array<any>): any;
    proxyArrayPush(func: any, args: Array<any>): any;
    proxyArrayShift(func: any, args: Array<any>): any;
    proxyArraySplice(func: any, args: Array<any>): any;
    proxyArrayUnshift(func: any, args: Array<any>): any;
    readonly parent: RMNode | null;
    readonly root: RMNode;
    hasFindByIdChangeListener(listener: FindByIdChangeListener, id: string): boolean;
    addFindByIdChangeListener(listener: FindByIdChangeListener, id: string): void;
    removeFindByIdChangeListener(listener: FindByIdChangeListener, id: string): void;
    hasIdChangeListener(listener: IdChangeListener): boolean;
    addIdChangeListener(listener: IdChangeListener): void;
    removeIdChangeListener(listener: IdChangeListener): void;
    hasParentChangeListener(listener: ParentChangeListener): boolean;
    addParentChangeListener(listener: ParentChangeListener): void;
    removeParentChangeListener(listener: ParentChangeListener): void;
    hasChangeListener(listener: ChangeListener, options?: ChangeListenerOptions | null): boolean;
    addChangeListener(listener: ChangeListener, options?: ChangeListenerOptions | null): void;
    removeChangeListener(listener: ChangeListener, options?: ChangeListenerOptions | null): void;
    hasPropertyNameChangeListener(listener: PropertyNameChangeListener): boolean;
    addPropertyNameChangeListener(listener: PropertyNameChangeListener): void;
    removePropertyNameChangeListener(listener: PropertyNameChangeListener): void;
    hasRootChangeListener(listener: RootChangeListener): boolean;
    addRootChangeListener(listener: RootChangeListener): void;
    removeRootChangeListener(listener: RootChangeListener): void;
    static valueToRModel(value: any): any;
    isRoot(): boolean;
    readonly property: string | null;
    static hasRModel(value: any): boolean;
    static getManagedValue(value: any): any;
    static toExternalValue(value: any): any;
    addComputedProperty<T, R>(property: string, f: (obj: T) => R, options: ComputedPropertyOptions | null): void;
    removeComputedProperty(property: string): void;
    setId(id: string): void;
    getId(): string | null;
    deleteId(): void;
    findById(id: string): object | null;
    setImmutable(listener: ImmutableListener): object;
    static getNodeForValue(value: any): RMNode | null;
    static getConnectedOrDisconnectedNodeForObject(obj: object): RMNode | null;
    flushImmutableChanges(): void;
    proxyGet(property: (string | Symbol)): any | null;
    proxySet(property: (string | Symbol), value: any | null): boolean;
    proxyDelete(property: (string | Symbol)): boolean;
}
